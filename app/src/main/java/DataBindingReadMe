
“Question 1: What are the different ways to use binding?”
In Activity
============
DataBindingUtil.setContentView(this,R.layout.activity_main)
When using fragment or adapter, we generally use ViewInflater to inflate layout
=================================================================================
MyLayoutBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.my_layout, viewGroup, false);

“Question 2: What kind of data can be passed to layout?”
<data>
  <import type="com.example.User"/>
  <import type="java.util.List"/>
  <import type="android.graphics.drawable.Drawable"/>
  ...
<variable name="user"  type="User"/>
  <variable name="image" type="Drawable"/>
  <variable name="note"  type="String"/>
  <variable name="userList" type="List&lt;User&gt;"/></data>

“Question 3: What if I have included a layout inside layout?”
 <include layout="@layout/inner_layout"
       bind:secondaryUser="@{user}"/>


There are two types of event handling,
=======================================
1. Method References
    @{(view)->secondaryUserInfo.onClick(view)}
2. Listener Bindings
    <data>
        <variable
          name="listener"
          type="android.view.View.OnClickListener" />
    </data>
    android:onClick="@{listener::onClick}"


expressions in layout to operate on data on the go…!!
====================================================
Mathematical + - / * %
String concatenation +
Logical && ||
Binary & | ^
Unary + - ! ~
Shift >> >>> <<
Comparison == > < >= <=
instanceof
Grouping ()
Literals — character, String, numeric, null
Cast
Method calls
Field access
Array access []
    android:text="@{user.settingsMap[key]}"
Ternary operator? :
    android:visibility="@{user.age < 18 ? View.GONE : View.VISIBLE}"

Null coalescing operator (??) chooses the left operand if it is not null or the right if it is null
    android:text="@{user.displayName ?? user.firstName}"
    //Equivalent to below
    android:text="@{user.displayName != null ? user.displayName : user.firstName}"

You can call any method from instance of a class directly inside the layout!
        //To convert into string with method call
        android:text="@{String.valueOf(user.age)}"
        //To calculate age from static method and display it
        <import type="com.example.Util"/>
        ...
        android:text="@{String.valueOf(Util.calculateAge(user.dob))}"
        //To call method of data model to convert date to string
        android:text="@{data.convertToString(data.dob)}"

Binding Adapter
--------------
Attribute Setters:
Whenever a bound value changes,
the generated binding class must call a setter method on the View with the binding expression.
The data binding framework has ways to customize which method to call to set the value.











